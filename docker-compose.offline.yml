# docker-compose.offline.yml

services:
  # Fragments microservice API server
  fragments:
    # Use a proper init process (tini)
    init: true
    # Build the Docker Image using the Dockerfile
    # and current directory as the build context
    build: .
    # Environment variables to use
    environment:
      # Our API will be running on http://localhost:8080
      - API_URL=http://localhost:8080
      # Use Basic Auth (for running tests, CI)
      - HTPASSWD_FILE=tests/.htpasswd
      # Use the LOG_LEVEL set in the host environment, or default to info
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - AWS_REGION=us-east-1
      # Use the LocalStack endpoint vs. AWS for S3 AWS SDK clients
      - AWS_S3_ENDPOINT_URL=http://localstack:4566
      # Use the DynamoDB Local endpoint vs. AWS for DynamoDB AWS SDK clients
      - AWS_DYNAMODB_ENDPOINT_URL=http://dynamodb-local:8000
      # local-aws-setup.sh Default to 'fragments' as the name, unless
      # Something else is specified in the environment.
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME:-fragments}
      - AWS_DYNAMODB_TABLE_NAME=${AWS_DYNAMODB_TABLE_NAME:-fragments}
      # Properties required as part of credentials
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_SESSION_TOKEN=test

    # Ports to publish
    ports:
      - '8080:8080'
  dynamodb-local:
    # Dynamodb-local that runs Amazon DynamoDB locally
    image: amazon/dynamodb-local
    ports:
      - '8000:8000'
    # Run the database in memory
    command: ['-jar', 'DynamoDBLocal.jar', '-inMemory']
  localstack:
    # localstack for Amazon S3
    image: localstack/localstack
    ports:
      - '4566:4566'
    environment:
      # We only want to run the S3 service
      - SERVICES=s3
      # Working in us-east-1
      - DEFAULT_REGION=us-east-1
